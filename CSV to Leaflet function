#Importations

import pandas as pd
import leaflet
import json
import codecs

#set the variable for the csv file you want to use
df = pd.read_csv(r"your_csv")

#declaring our function
def to_leaflet(df) :

#The first step is to set variables for each of the columns we want to visualise in our map. Each column contains a different kind of data, that will be read by the algorithm.
#It can be labels, numeric data (like dates), or some other stuff that will interact with the algoritm to be dsplayed in the way  we want on the map.
    
#We need to clean the data we want to use. Depending on what you have in your CSV, you must be careful for the data to be correctly read by JS.

    df["Column1_label"] = df["Column1"].astype(str)
    df["Column1"] = df["Column1"].astype(str)
    df["Column1"] = df.Column1.apply(lambda x: x.replace(" _", ""))
    df["Column1"] = df.Column1.apply(lambda x: x.replace("è", "e"))
    df["Column1"] = df.Column1.apply(lambda x: x.replace("»", ""))
    #etc....
    
#Blank rows can interrupt the code, so make sure you fill all the blank spaces using the "fillna" function.

    df["Indice"] = df["Indice"].fillna(0.0)
    
#For some operations (like apply or concatenations) you will need to convert your data as "str" (string)
    
    df["Name"] = df["Name"].astype(str)
    df["Column1_label"] = df["Column1_label"].astype(str)
    df["Column2"] = df["Column2"].astype(str)
    

#set as much variables as you need for your columns, repeat operations.
    
    points = df["Column1"]
    places = df["Coordinates"]
    labels = df["Column1_label"]
    labels = labels.replace("nan", "unknown")
    Indice = df["Indice"].astype(int)
    Cities = df["Column2"].astype(str)
    name = df["Name"].astype(str)
    date_label = df["Date(circa)"].astype(str)
    date_label = date_label.replace("nan", "unknown")
    date_start = df["Date_start"].astype(str)
    date_start = date_start.apply(lambda x: x.replace(".0", ""))
    date_fin = df["Date_fin"].astype(str)
    date_fin = date_fin.apply(lambda x: x.replace(".0", ""))
    
    Column3 = df["Column3"].fillna("false")
    Column3 = Column3.astype(str)
    Column4 = df["Column4"].fillna("false")
    Column4 = Column4.astype(str)
    Column5 = df["Column5"].fillna("false")
    Column5 = Column5.astype(str)
    
    

#a little trick for setting the coordinates of the map, as the mean of all your data's coordinates:   
    
    ddf = lat
    dddf = lon

    meanlat = ddf.describe()
    meanlon = dddf.describe()
    meanlat = meanlat[1]
    meanlon = meanlon[1]
    #now the coordinates to set the map's default view will be [meanlat,meanlon]
    
#set a color variable for your layers, it will be simpler to change it then.
    
    color = "color"

#This python program works by printing the HTML document of our interactive map. This printing comes in 3 parts : two permanent parts and one iterable part.
#We use the variable leaflet points as the first container for our printed HTML code.
    
#Now we will print the first part of our interactive map, wich is the begining of the HTML document. This part must be printed just once, is not concerned by any variable apart from the mean-coordinates part.
#Note how we insert the variable in our JS code : we use ''' to create a permanent string (like a kind of strong

    leaflet_points = '''

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A==" crossorigin="anonymous" />
        <link href="https://unpkg.com/nouislider@15.5.1/dist/nouislider.css" rel="stylesheet">
        <link href="https://unpkg.com/leaflet-search@3.0.2/dist/leaflet-search.src.css" rel="stylesheet"></script>
        <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js" integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA==" crossorigin="anonymous"></script>
        <script src="https://unpkg.com/jquery@3.3.1/dist/jquery.js"></script>
        <script src="https://unpkg.com/nouislider@15.5.1/dist/nouislider.js"></script>
        <script src="https://unpkg.com/wnumb@1.2.0/wNumb.js"></script>
        <script src="https://unpkg.com/leaflet-search@3.0.2/dist/leaflet-search.src.js"></script>
        
        <title>title</title>
        
        <style>

            body {
            }

        </style>
    </head>

<body>
        <header> </header>
    
    <section>
        <div id="map"></div>
    </section>
    
        <footer></footer>
        
    <script>
            var map = L.map('map').setView( ['''+str(meanlat)+","+ str(meanlon)+'''], 5);
            

            L.tileLayer(
                    "https://api.mapbox.com/styles/.....",
                    {"attribution": "your attribution"}
                ).addTo(map);
                
                L.control.scale().addTo(map);
            
            var data = [
            '''
#This "var data" ↑ refers to a JS variable that will contain all of our data, now printed by our iterable algorithm. All the data is put in a form of JS Dictionnary.
#The variable leaflet_point (without s) contains the ephemeral data of each element of our dictionnary, equivalent for a ow of our dataset. Each iteration sets a new variable and prints it into
#our leaflet_points variable, inside the "var data" variable of our JS code. The code iterates for each row of the dataset, based on the lenght of the "places" variable, starting at 1 (not 0).
    
    for i in places[1:]:
    
        x = x+1

            leaflet_point = '''{"loc": ['''+str(lat[x])+","+str(lon[x])+'''],
            "title":"'''+name[x]+", "+labels[x]+", "+date_label[x]+", "+Cities[x]+'''.",
            "Indice":'''+str(Indice[x])+''',
            "date_start":'''+str(date_start[x])+''',
            "date_fin":'''+str(date_fin[x])+''',
            "Column3":"'''+str(Column3[x])+'''",
            "Column4":"'''+str(Column4[x])+'''",
            "Column5":"'''+str(Column5[x])+'''"
            },
                '''
        
        leaflet_points += str(leaflet_point)
        
    x=0
    
#Now we print the third and last part of our HTML file. The second iterable algorithm is in javascript
#containg all the functions you want to apply to your data to have the interactions you need on your map.
#Personnaly I've used a time slider and a search bar; each one is attached to a Layer group.
        
    leaflet_points += '''
        ]
        
        var searchLayer = new L.LayerGroup().addTo(map);	//layer contain searched elements
        var sliderLayer = new L.LayerGroup().addTo(map);	//layer contain slider elements

        
         ////////////populate map with markers from printed data 
        for(i in data) {
            var title = data[i].title,	//value searched
                loc = data[i].loc,		//position found
                Indice = data[i].Indice
                Column3 = data[i].Column3
                Column4 = data[i].Column4
                Column5 = data[i].Column5
                date_start = data[i].date_start
                date_fin = data[i].date_fin
                img = data[i].img
                

            var marker = new L.marker (new L.latLng(loc), {title:title, opacity: 1, properties:{date_start:date_start, date_fin:date_fin}}).bindPopup(title);
                        searchLayer.addLayer(marker);
                        sliderLayer.addLayer(marker);
                        
            var circle = new L.circle (new L.latLng(loc), {
                        title:title,
                        color: "none",
                        opacity: 0.15,
                        fillColor: "color",
                        fillOpacity: 0.125 - indice*0.017,
                        radius: 8000*(indice*indice+3),
                        properties:{date_start:date_start, date_fin:date_fin}}).bindPopup(title);
                        
                        searchLayer.addLayer(circle);
                        sliderLayer.addLayer(circle);
                        
                        
                switch (Column5) {
                    case 'True':
                            LayerGroup1.addLayer(circle);
                            LayerGroup1.addLayer(marker);
                            break;
                        default:
                        var none = "none";
                };
                switch (Column4) {
                    case 'True':
                            LayerGroup2.addLayer(circle);
                            LayerGroup2.addLayer(marker);
                            break;
                        default:
                        var none = "none";
                };
                switch (Column3) {
                    case 'True':
                            LayerGroup3.addLayer(circle);
                            LayerGroup3.addLayer(marker);
                            break;
                        default:
                        var none = "none";
                };
                switch (Column4) {
                    case 'A':
                            LayerGroup1.addLayer(circle);
                            break;
                    case 'B':
                            LayerGroup2.addLayer(marker);
                            break;
                            
                        default:
                        var none = "none";
                }}

        // Search bar settings
        
        var controlSearch = new L.Control.Search({
            position:'topleft',		
            layer: searchLayer,
            zoom: 6.5,
            initial: false,
            textPlaceholder: 'Rechercher un point...',
            textErr: 'Pas de résultats',
            marker: false
        });

        map.addControl( controlSearch );
        
        var filters = {"All":sliderLayer,
        "Filter 1":LayerGroup1,
        "Filter 2":LayerGroup2,
        "Filter 3":LayerGroup3,
        
        
        // FONCTIONS
        
        L.control.layers(null, filtres).addTo(map);
        
        controlSearch.on('search:locationfound', function(e) {
        
        e.layer.openPopup().openOn(map);
        map.removeLayer(LayerGroup2);
        map.removeLayer(LayerGroup1);
        map.removeLayer(LayerGroup3);
        
        map.addLayer(searchLayer)
        map.addLayer(sliderLayer)
        
        });
        
        
        var slider = document.getElementById('slider');
        
        
           noUiSlider.create(slider, {
                start: [0,1000],
                color: 'midnightblue',
                behaviour:'drag-slide',
                connect: true,
                tooltips: [wNumb({decimals:0}),wNumb({decimals:0})],
                range: {
                    'min': 0,
                    'max': 1000,
                }
            }).on('slide', function(e) {
                console.log(e)
                
                map.removeLayer(searchLayer)
                
                
                LayerGroup1.eachLayer(function (layer) {

                 if(layer.options.properties.date_start>=parseFloat(e[0])&&layer.options.properties.date_fin<=parseFloat(e[1])) {
                    LayerGroup1.addLayer(layer);}
                 else {map.removeLayer(layer)}})
                 
                
                LayerGroup2.eachLayer(function (layer) {

                 if(layer.options.properties.date_start>=parseFloat(e[0])&&layer.options.properties.date_fin<=parseFloat(e[1])) {
                    LayerGroup2.addLayer(layer);}
                 else {map.removeLayer(layer)}})
                
                LayerGroup3.eachLayer(function (layer) {

                 if(layer.options.properties.date_start>=parseFloat(e[0])&&layer.options.properties.date_fin<=parseFloat(e[1])) {
                    LayerGroup3.addLayer(layer);}
                 else {map.removeLayer(layer)}})
                
                
                sliderLayer.eachLayer(function (layer) {

                 if(layer.options.properties.date_start>=parseFloat(e[0])&&layer.options.properties.date_fin<=parseFloat(e[1])) {
                    sliderLayer.addLayer(layer);}
                 else {map.removeLayer(layer)}})
                
                 
            })

        
        
            
        </script>

    </body>
    </html>'''

    #Now we need to create a decent HTML file, before writing the code contained by our leaflet_points variable, in it.

    utf8 = leaflet_points.encode('utf-8')
    text_file = open(r"C:\Users\Username\Documents\Interactive_map.html", "w", encoding='utf-8')
    text_file.write(leaflet_points)
    text_file.close()
    
    #Now you have your interactive map ready to be opened.

    return print("open file")
